---
# NetApp ONTAP create NFS shares
- hosts: localhost
  collections:
    - netapp.ontap
  gather_facts: false
#  vars_prompt:
#    - name: username
#      prompt: enter the username
#      private: no
#    - name: password
#      prompt: enter password
  vars:
    login: &login
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      https: true
      validate_certs: false
    drlogin: &drlogin
      hostname: "{{ drclusterip }}"
      username: "{{ username }}"
      password: "{{ password }}"
      https: true
      validate_certs: false
  vars_files:
    - var_nfs_file_shares.yml
  tasks:
    - name: Create NFS shares inc volume from application template
      na_ontap_volume:
        use_rest: always
        state: present
        name: "{{ item.volume }}"
        vserver: "{{ item.svm }}"
        size: "{{ item.size }}"
        size_unit: "{{ item.size_unit }}"
        junction_path: "{{ '/' + item.volume }}"
        space_guarantee: none
        tiering_policy: auto
        volume_security_style: unix
        percent_snapshot_space: 20
        snapshot_policy: "{{ item.snap_policy }}"
        comment: "{{ item.comment }}"
        nas_application_template:
          nfs_access:
            - access: rw
              host: "{{ item.host_access }}"
        <<: *login
      with_items: "{{ nfs_file_shares }}"

    - name: Create Export Policy in DR SVM
      when: item.replicated == 'yes'
      na_ontap_export_policy:
        state: present
        name: "{{ item.volume + '_mv1' }}"
        vserver: "{{ item.dr_svm }}"
        <<: *drlogin
      with_items: "{{ nfs_file_shares }}"

    - name: create export-policy rule for host access in DR
      when: item.replicated == 'yes'
      na_ontap_export_policy_rule:
        use_rest: always
        state: present
        name: "{{ item.volume + '_mv1' }}"
        vserver: "{{ item.dr_svm }}"
        rule_index: 2
        client_match: "{{ item.host_access }}"
        ro_rule: any
        rw_rule: any
        protocol: nfs
        <<: *drlogin
      with_items: "{{ nfs_file_shares }}"

    - name: 'get aggr info for dr cluster'
      na_ontap_rest_info:
        <<: *drlogin
        use_python_keys: true
        gather_subset:
          - storage/aggregates
        parameters:
          space.block_storage.physical_used_percent: "<85"
        fields:
          - 'name'
          - 'space.block_storage.available'
      register: dr_aggregate_info

    - name: 'create clean list of dicts from aggregate json'
      set_fact: 
        dr_aggregate_clean: "{{ dr_aggregate_info | json_query(query_dr_aggr_info) }}"
      vars:
        query_dr_aggr_info: "ontap_info.storage_aggregates.records[*].{ name: name, space_available: space.block_storage.available }"

    - name: 'sort the list by space_available'
      set_fact:
        dr_aggregate: "{{ dr_aggregate_clean | sort(attribute='space_available', reverse=true) }}"   

    - name: Create snapmirror destination volumes SC2-3
      when: item.replicated == 'yes'
      na_ontap_volume:
        use_rest: always
        state: present
        name: "{{ item.volume + '_mv1' }}"
        vserver: "{{ item.dr_svm }}"
        aggregate_name: "{{ dr_aggregate[0].name }}"
        size: "{{ item.size }}"
        size_unit: "{{ item.size_unit }}"
        type: dp
        space_guarantee: none
        tiering_policy: all
        comment: "'{{ item.comment }}' + 'DR and Intellisnap DP volume'"
        <<: *drlogin
      with_items: "{{ nfs_file_shares }}"

    - name: Create and initialise SnapMirror relationship SC2-3
      when: item.replicated == 'yes'
      na_ontap_snapmirror:
        use_rest: never
        state: present
        policy: MirrorAndVault
        initialize: true
        source_path: "{{ item.svm + ':' + item.volume }}"
        destination_path: "{{ item.dr_svm + ':' + item.volume + '_mv1' }}"
        schedule: "{{ item.schedule }}"
        <<: *drlogin
      with_items: "{{ nfs_file_shares }}"

    - name: Create snapmirror destination volumes SC5
      when: item.replicated == 'no'
      na_ontap_volume:
        use_rest: always
        state: present
        name: "{{ item.volume + '_v1' }}"
        vserver: "{{ item.dr_svm }}"
        aggregate_name: "{{ dr_aggregate[0].name }}"
        size: "{{ item.size }}"
        size_unit: "{{ item.size_unit }}"
        type: dp
        space_guarantee: none
        tiering_policy: all
        comment: "'{{ item.comment }}' + 'Intellisnap DP volume'"
        <<: *drlogin
      with_items: "{{ nfs_file_shares }}"

    - name: Create and initialise SnapMirror relationships SC5
      when: item.replicated == 'no'
      na_ontap_snapmirror:
        use_rest: always
        state: present
        policy: MirrorAndVault
        initialize: true
        source_endpoint:
          cluster: "{{ clustername }}"
          path: "{{ item.svm + ':' + item.volume }}"
        destination_endpoint:
           cluster: "{{ drclustername }}"
           path: "{{ item.dr_svm + ':' + item.volume + '_v1' }}"
        <<: *drlogin
      with_items: "{{ nfs_file_shares }}"

    - name: mount destination volumes for access SC2-3
      when: item.replicated == 'yes'
      na_ontap_volume:
        use_rest: always
        state: present
        name: "{{ item.volume + '_mv1' }}"
        vserver: "{{ item.dr_svm }}"
        junction_path: "{{ '/' + item.volume + '_mv1' }}"
        <<: *drlogin
      with_items: "{{ nfs_file_shares }}"