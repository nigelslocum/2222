---
# NetApp ONTAP create NFS shares
- hosts: localhost
  collections:
    - netapp.ontap
  gather_facts: false
#  vars_prompt:
#    - name: username
#      prompt: enter the username
#      private: no
#    - name: password
#      prompt: enter password
  vars:
    login: &login
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      https: true
      validate_certs: false
  vars_files:
    - var_nfs_file_shares.yml
  tasks:
    - name: Create NFS shares inc volume from application template
      na_ontap_volume:
        use_rest: always
        state: present
        name: "{{ item.volume }}"
        vserver: "{{ item.vserver }}"
        size: "{{ item.size }}"
        size_unit: "{{ item.size_unit }}"
        junction_path: "{{ '/' + item.volume }}"
        space_guarantee: none
        tiering_policy: auto
        volume_security_style: unix
        percent_snapshot_space: 20
        snapshot_policy: "{{ item.snap_policy }}"
        comment: "{{ item.comment }}"
        nas_application_template:
          nfs_access:
            - access: rw
              host: "{{ item.host_access }}"
        <<: *login
      with_items: "{{ nfs_file_shares }}"

    - name: Create Export Policy in DR SVM
      when: item.dest_vserver is defined
      na_ontap_export_policy:
        state: present
        name: "{{ item.volume + '_dest' }}"
        vserver: "{{ item.dest_vserver }}"
        hostname: "{{ peer_cluster_mgmt_ip }}"
        username: "{{ username }}"
        password: "{{ password }}"
        https: true
        validate_certs: false
      with_items: "{{ nfs_file_shares }}"

    - name: create export-policy rule for host access in DR
      when: item.dest_vserver is defined
      na_ontap_export_policy_rule:
        use_rest: always
        state: present
        name: "{{ item.volume + '_dest' }}"
        vserver: "{{ item.dest_vserver }}"
        rule_index: 2
        client_match: "{{ item.host_access }}"
        ro_rule: any
        rw_rule: any
        protocol: nfs
        hostname: "{{ peer_cluster_mgmt_ip }}"
        username: "{{ username }}"
        password: "{{ password }}"
        https: true
        validate_certs: false
      with_items: "{{ nfs_file_shares }}"

    - name: Create snapmirror destination volumes
      when: item.dest_vserver is defined
      na_ontap_volume:
        use_rest: always
        state: present
        name: "{{ item.volume + '_dest' }}"
        vserver: "{{ item.dest_vserver }}"
        aggregate_name: "{{ item.dest_aggr }}"
        size: "{{ item.size }}"
        size_unit: "{{ item.size_unit }}"
        type: dp
        space_guarantee: none
        tiering_policy: all
        comment: "{{ item.comment }}"
        hostname: "{{ peer_cluster_mgmt_ip }}"
        username: "{{ username }}"
        password: "{{ password }}"
        https: true
        validate_certs: false
      with_items: "{{ nfs_file_shares }}"

    - name: Create and initialise SnapMirror relationships
      when: item.dest_vserver is defined
      na_ontap_snapmirror:
        use_rest: always
        state: present
        policy: "{{ item.protection_policy }}"
        initialize: true
        source_endpoint:
          cluster: "{{ clustername }}"
          path: "{{ item.vserver + ':' + item.volume }}"
        destination_endpoint:
           cluster: "{{ peer_cluster_name }}"
           path: "{{ item.dest_vserver + ':' + item.volume + '_dest' }}"
        hostname: "{{ peer_cluster_mgmt_ip }}"
        username: "{{ username }}"
        password: "{{ password }}"
        https: true
        validate_certs: false
      with_items: "{{ nfs_file_shares }}"

    - name: pause for 1 minute to wait for snapmirrors to initialise
      ansible.builtin.pause:
        minutes: 1

    - name: mount destination volumes for access
      when: item.dest_vserver is defined
      na_ontap_volume:
        use_rest: always
        state: present
        name: "{{ item.volume + '_dest' }}"
        vserver: "{{ item.dest_vserver }}"
        junction_path: "{{ '/' + item.volume + '_dest' }}"
        hostname: "{{ peer_cluster_mgmt_ip }}"
        username: "{{ username }}"
        password: "{{ password }}"
        https: true
        validate_certs: false
      with_items: "{{ nfs_file_shares }}"