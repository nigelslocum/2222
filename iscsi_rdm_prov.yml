---
# NetApp ONTAP create iSCSI RDMs for VMware
- hosts: localhost
  collections:
    - netapp.ontap
  gather_facts: false
#  vars_prompt:
#    - name: username
#      prompt: enter the username
#      private: no
#    - name: password
#      prompt: enter password
  vars:
    login: &login
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      https: true
      validate_certs: false
    drlogin: &drlogin
      hostname: "{{ drclusterip }}"
      username: "{{ username }}"
      password: "{{ password }}"
      https: true
      validate_certs: false
  vars_files:
    - var_iscsi_rdms.yml
  tasks:
    - name: create igroups
      na_ontap_igroup:
        use_rest: always
        state: present
        vserver: "{{ item.svm }}"
        name: "{{ item.esx_cluster + '_vmware' }}"
        initiator_group_type: iscsi
        os_type: vmware
        initiator_names: "{{ item.iqn_names }}" #comma separated
        <<: *login        
      with_items: "{{ igroups }}"

    - name: Create LUNs using SAN application
      na_ontap_lun:
        state: present
        name: "{{ item.lun }}"
        os_type: vmware
        vserver: "{{ item.svm }}"
        san_application_template:
          name: "{{ item.lun }}"
          igroup_name: "{{ item.esx_cluster + '_vmware' }}"
          lun_count: 1
          total_size: "{{ item.lun_size }}"
          total_size_unit: "{{ item.size_unit }}"
          protection_type:
            local_policy: none
          scope: auto
          use_san_application: true
        <<: *login
      with_items: "{{ luns }}"

    - name: map LUNs to igroup
      na_ontap_lun_map:
        use_rest: always
        state: present
        vserver: "{{ item.svm }}"
        initiator_group_name: "{{ item.esx_cluster + '_vmware' }}"
        path: "{{ '/vol/' + item.lun + '/' + item.lun }}"
        <<: *login        
      with_items: "{{ luns }}"

    - name: 'get aggr info for dr cluster'
      na_ontap_rest_info:
        <<: *drlogin
        use_python_keys: true
        gather_subset:
          - storage/aggregates
        parameters:
          space.block_storage.physical_used_percent: "<85"
        fields:
          - 'name'
          - 'space.block_storage.available'
      register: dr_aggregate_info

    - name: 'create clean list of dicts from aggregate json'
      set_fact: 
        dr_aggregate_clean: "{{ dr_aggregate_info | json_query(query_dr_aggr_info) }}"
      vars:
        query_dr_aggr_info: "ontap_info.storage_aggregates.records[*].{ name: name, space_available: space.block_storage.available }"

    - name: 'sort the list by space_available'
      set_fact:
        dr_aggregate: "{{ dr_aggregate_clean | sort(attribute='space_available', reverse=true) }}"   

    - name: Create snapmirror destination volumes
      when: item.replicated == 'yes'
      na_ontap_volume:
        use_rest: always
        state: present
        name: "{{ item.lun + '_m1' }}"
        vserver: "{{ item.dr_svm }}"
        aggregate_name: "{{ dr_aggregate[1].name }}"
        size: "{{ item.lun_size * 2 }}"
        size_unit: "{{ item.size_unit }}"
        type: dp
        space_guarantee: none
        tiering_policy: all
        <<: *drlogin 
      with_items: "{{ luns }}"

    - name: Create and initialise SnapMirror relationship SC2-3
      when: item.replicated == 'yes'
      na_ontap_snapmirror:
        use_rest: never
        state: present
        policy: MirrorAndVault
        initialize: true
        source_path: "{{ item.svm + ':' + item.lun }}"
        destination_path: "{{ item.dr_svm + ':' + item.lun + '_m1' }}"
        schedule: "{{ item.schedule }}"
        <<: *drlogin
      with_items: "{{ luns }}"

    - name: create igroups in DR SVM
      na_ontap_igroup:
        use_rest: always
        state: present
        vserver: "{{ item.dr_svm }}"
        name: "{{ item.esx_cluster + '_vmware' }}"
        initiator_group_type: iscsi
        os_type: vmware
        initiator_names: "{{ item.iqn_names }}" #comma separated
        <<: *drlogin        
      with_items: "{{ dr_igroups }}"